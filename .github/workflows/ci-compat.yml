name: JQuill CI

on:
  push:
    branches:
      - main
      - ci-test
  pull_request:
    branches:
      - main
      - ci-test

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 17, 20, 24, 25 ]
        build: [ maven, gradle ]
        mavenVersion: [ "3.8.8", "3.9.11" ]
        gradleVersion: [ "8.3", "8.4" ]
    continue-on-error: true   # <-- don't fail the whole workflow
    name: Java ${{ matrix.java }} + ${{ matrix.build }}
    outputs:
      result-table: ${{ steps.set-table.outputs.table }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: Setup Build Tool
        run: |
          if [ "${{ matrix.build }}" == "maven" ]; then
            echo "Using Maven ${{ matrix.mavenVersion }}"
            curl -sL https://archive.apache.org/dist/maven/maven-3/${{ matrix.mavenVersion }}/binaries/apache-maven-${{ matrix.mavenVersion }}-bin.zip -o maven.zip
            unzip maven.zip
            export PATH="$PWD/apache-maven-${{ matrix.mavenVersion }}/bin:$PATH"
          else
            echo "Using Gradle ${{ matrix.gradleVersion }}"
            wget https://services.gradle.org/distributions/gradle-${{ matrix.gradleVersion }}-bin.zip -O gradle.zip
            unzip gradle.zip
            export PATH="$PWD/gradle-${{ matrix.gradleVersion }}/bin:$PATH"
          fi

      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gradle
          key: ${{ runner.os }}-build-${{ matrix.build }}-${{ hashFiles('**/pom.xml','**/build.gradle') }}

      - name: Build Project
        id: build
        run: |
          if [ "${{ matrix.build }}" == "maven" ]; then
            mvn clean install -B
          else
            gradle clean build --console=plain
          fi
        continue-on-error: true

      - name: Record result
        id: set-table
        run: |
          if [ $? -eq 0 ]; then STATUS="✅"; else STATUS="❌"; fi
          echo "table=${{ matrix.java }}|${{ matrix.build }}|$STATUS" >> $GITHUB_OUTPUT

  aggregate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Collect results
        run: |
          # Initialize Markdown table
          echo '| Java | Tool | Status |' > compat.md
          echo '|------|------|--------|' >> compat.md

          # Loop over results from build matrix
          for result in ${{ needs.build.outputs.result-table }}; do
            echo "$result" | while IFS="|" read java tool status; do
              echo "| $java | $tool | $status |" >> compat.md
            done
          done

      - name: Update README
        run: |
          awk '
            /<!-- COMPAT_TABLE_START -->/{print; while(getline < "compat.md") print; 
              skip=1; next} 
            /<!-- COMPAT_TABLE_END -->/{skip=0} 
            !skip{print}' README.md > README.tmp && mv README.tmp README.md      

      - name: Commit README
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Update Java/Build tool compatibility table [skip ci]" || echo "No changes"
          git push